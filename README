SANDBOXES

Various tests need to check against all sort of weird situations like trying
to access a file without search/execute permission or resolve an unresolvable
symbolic link and so on. For this purpose we have introduced the notion of a
sandbox/ directory, which acts as a provider for them.
The sandbox/ directories are created and populated via mktests.sh script. Every
$header.h/ directory that needs one, there must have a file need-sandbox in it.
No need for that file to contain anything at all, just exist. But, it MUST be
tracked by git:

~/pcca-tests% mkdir foo.h
~/pcca-tests% cd foo.h
~/pcca-tests/foo.h% touch need-sandbox
~/pcca-tests/foo.h% git add need-sandbox
~/pcca-tests/foo.h% git commit -m "foo.h: Add need-sandbox file"
...
~/pcca-tests%
~/pcca-tests% ./mktests.sh -s ./foo.h
Created ./foo.h/sandbox directory
~/pcca-tests%

--------------------------------------------------------------------------------

RUNNING THE TESTS

You may run the tests in two ways, either automatically via mktests.sh by
supplying a top level directory to start from and letting it traverse the
whole directory hierarchy underneath it, or manually on a per directory
basis.

The are a few unique characteristics embedded in mktests.sh that render it
the preferred way to run the tests. First, mktests.sh can recursively run tests,
eg. run all tests associated with sys/* headers. Second, it supports job control,
which means that if a test exceeds a specified amount of execution time, it gets
killed and the rest of the tests run normally. Finally, while running the tests,
log statistics are generated for every $header.h/ directory, which can later be
retrieved by the getstats.sh script. Here is a usual workflow:

~/pcca-tests% ./mktests.sh -c	     # Clean files from previous build/run
~/pcca-tests% ./mktests.sh -s	     # Construct sandbox/ directories
...	      		   	     # Messages from the construction
~/pcca-tests% ./mktests.sh -b	     # Build test cases
...	      		   	     # Messages from gcc compilation
~/pcca-tests% ./mktests.sh -r	     # Run tests (if none given, . is assumed
                                     # as the top level directory to start from)
~/pcca-tests% ./mktests.sh -r
/aio.h/t_aio: Assertion failed: (aio_read(&iocb) != -1), function main, file
t_aio.c, line 56.
/complex.h/t_cabs: passed
/complex.h/t_carg: passed
/complex.h/t_cacos: passed
...
~/pcca-tests%

In manual mode, one cd's into the directory of interest, types 'make' to
build the tests and 'make run' to run them.

~/pcca-tests% cd stdio.h
~/pcca-tests/stdio.h% make
...       # Messages from gcc compilation
~/pcca-tests/stdio.h% make run
t_clearerr: passed
t_ctermid: passed
...
t_tmpfile: passed
~/pcca-tests/stdio.h%

--------------------------------------------------------------------------------

GETTING STATISTICS

After a bulk run has been completed (or even interrupted, since logs are
generated incrementally) the log statistics can be retrieved via the getstats.sh
script.

~/pcca-tests% ./getstats.sh	# If no argument is given, "." is assumed
>>> Headers
        Audited:       77

>>> Test files
        tfiles :      195

>>> Lines of code
        C      :    15955
        make   :     1877
        sh     :      959
        Perl   :      175

>>> Results from last run
        Passed :      164
        Failed :       31

It is also possible to explicitly set the top level directory. Suppose we need
to know about the complex arithmetic support of the host environment:

~/pcca-tests% ./getstats.sh ./complex.h
>>> Headers
        Audited:        1

>>> Test files
        tfiles :       26

>>> Lines of code
        C      :     1744
        make   :      194
        sh     :        0
        Perl   :        0

>>> Results from last run
        Passed :       26
        Failed :        0
~/git-repos/pcca-tests%

There is no magic involved in here (or nowhere else). The whole test repository
layout is dead simple. In each $header.h/ directory you can find two files:
log{passed,failed} containing the names of the test binaries that passed or
failed respectively.

--------------------------------------------------------------------------------

POSSIBLE PLACES OF CONFUSION

* The user that runs the test must NOT be root. This is a good practice anyway,
but it's not just that. Some tests require that they are executed in a non-
privileged context, eg. unistd.h/t_access2.
On the other hand, the user MUST belong to the sudoers, because in some places,
we need to set-user_ID bit or change the owner of a file, eg. unistd.t_access2.
XXX: What about Solaris 10 and later?


* In Linux particularly, but in other systems as well, make sure that you don't
mount the medium where the tests reside as 'nosuid' (or similar). Again, this is
because some tests have the set-user-ID bit set, eg. unistd.h/t_access2. Running
them in a context where the uid can't be escalated, it will result in a false
failed test.
If you want to get the list of suid binaries in the repository, after you have
built the tests, type:

~/git-repos/pcca-tests% find . -type f \( -perm -4000 -o -perm -2000 \) -exec \
> ls -lh {} \; 2>/dev/null
-rwsr-xr-x  1 root  beket   6.9K Aug 12 00:09 ./unistd.h/t_access2
~/git-repos/pcca-tests%


* If you try to grep(1) recursively inside a $header.h directory that contains
a sandbox/ directory, grep may block indefinitely in 'fifoor' state or similar.
This is due to the presence of fifo special file inside the sandbox/ directory,
which will block grep upon opening it. This is a perfectly legitimate behavior
and not some bug of grep. It can be circumvented by passing -O option to grep,
instructing it to skip special files. -O though is non-standard so it may not
be readily available to all systems. In such case, just delete the sandbox/'es
with mktests.sh -c and then grep.


* If you try to find(1) inside a repository that has the sandbox/ directories in
it, errors will be printed to your console:

~/git-repos/pcca-tests% find . -name foo
find: ./unistd.h/sandbox/dir000: Permission denied
...
~/git-repos/pcca-tests%

These are harmless but annoying nonetheless. You can try deleting the sandboxes
with mktests.sh -c and the call find. You may also use one of the specialized
scripts in the repository (getheaders.sh, getheaders.sh, getspecs.sh, etc).
The latter not only silences the error messages, but also skips the .git/
directory, which may save you a little bit of execution time.


* Log files are generated ONLY when tests are executed via mktests.sh and NOT
manually with make && make run.

~/pcca-tests% ./mktests.sh -c
~/pcca-tests% cd stdio.h
~/pcca-tests/stdio.h% make
...
~/pcca-tests/stdio.h% make run
...
~/git-repos/pcca-tests% ./getstats.sh ./stdio.h
...
>>> Results from last run
        Passed :        0
        Failed :        0
~/pcca-tests% ./mktests.sh -r ./stdio.h
...
~/pcca-tests% ./getstats.sh ./stdio.h
...
>>> Results from last run
        Passed :        7
        Failed :        0
~/pcca-tests%
